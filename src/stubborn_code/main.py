import network
import constants
import simpy
import numpy

simulationTimeout = constants.simTime  # in seconds


def run(env, peer):
    while True:
        TxnInter_arrivalTime = numpy.random.exponential(scale=constants.Ttx, size=None)
        #print(TxnInter_arrivalTime)
        yield env.timeout(TxnInter_arrivalTime)
        #print("transaction generated by peer %d at %s , %d" % (peer.id, datetime.datetime.now(),env.now))
        env.process(peer.generateTransaction())


env = simpy.Environment()
mynetwork = network.Network()
peers = mynetwork.nodes
for peer in peers:
    env.process(run(env, peer))
    """
    if blockchain length == 1 create a block and start mining 
    """

env.run(until=simulationTimeout)


"""
    if (constants.enableAnalysis):
        print("--------------------------")
        print("Network Graph:", mynetwork.graph)
        print("--------------------------")
    startTime = time.time()
    while True:
        if (time.time() - startTime >= simulationTimeout):
            break
        for node in mynetwork.nodes:
            node.doRoutine()
    if (constants.enableAnalysis):
        doAnalysis(mynetwork)  """



def doAnalysis(network):
    for node in network.nodes:
        print("--------------------------")
        node.printNode()

        node.blockchain.chain.printTree(node.id)
        # print the longest chain
        print('[ ', end="")
        for block in node.blockchain.getLongestChain():
            print(block.id, ",", end="")
        print(" ]")

# WARNING: EXPERIMENTATION ZONE AHEAD!

# mytree = tree.Tree("0x001", "LoL_data_a_lot_of_data")
# mytree.addNode("0x001", "0x002", "LoL_data_a_lot_of_data")
# mytree.addNode("0x001", "0x003", "LoL_data_a_lot_of_data")
# mytree.addNode("0x001", "0x004", "LoL_data_a_lot_of_data")

# mytree.addNode("0x002", "0x005", "LoL_data_a_lot_of_data")
# mytree.addNode("0x002", "0x006", "LoL_data_a_lot_of_data")
# mytree.addNode("0x002", "0x007", "LoL_data_a_lot_of_data")
# mytree.addNode("0x002", "0x008", "LoL_data_a_lot_of_data")

# mytree.addNode("0x005", "0x009", "LoL_data_a_lot_of_data")
# mytree.addNode("0x009", "0x010", "LoL_data_a_lot_of_data")

# mytree.printTree()
# print('deepest:', mytree.getDeepestNode().key)
